<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>云服务器上使用Docker部署代理</title>
    <url>/2025/08/08/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h4 id="参考链接">参考链接</h4>
<ul>
<li><a
href="https://github.com/metacubex/metacubexd">Docker配置文件</a></li>
<li><a href="https://docker.aityp.com/">ghcr.io代理</a></li>
<li><a
href="https://github.com/Loyalsoldier/geoip/releases/tag/202508070023">地址文件下载</a></li>
</ul>
<h4 id="部署过程">部署过程</h4>
<p>创建docker-compose.yml文件<br />
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">metacubexd:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">metacubexd</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/metacubex/metacubexd</span> <span class="comment"># 此处仅配置docker镜像不能加速，可以使用ghcr.io代理</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># optional</span></span><br><span class="line">  <span class="attr">meta:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">meta</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.io/metacubex/mihomo:Alpha</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">pid:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">ipc:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALL</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.yaml:/root/.config/mihomo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dev/net/tun:/dev/net/tun</span></span><br></pre></td></tr></table></figure></p>
<p>mihomo内核缺少MMDB文件启动时会报错,
需要自行下载放到config文件夹:<br />
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">clash_core_meta  | time=&quot;2025-08-08T08:11:01.716765387Z&quot; level=info msg=&quot;Start initial configuration in progress&quot;</span><br><span class="line">clash_core_meta  | time=&quot;2025-08-08T08:11:01.764156792Z&quot; level=info msg=&quot;Geodata Loader mode: memconservative&quot;</span><br><span class="line">clash_core_meta  | time=&quot;2025-08-08T08:11:01.764196046Z&quot; level=info msg=&quot;Geosite Matcher implementation: succinct&quot;</span><br><span class="line">clash_core_meta  | time=&quot;2025-08-08T08:11:01.777027228Z&quot; level=warning msg=&quot;MMDB invalid, remove and download&quot;</span><br><span class="line">clash_core_meta  | time=&quot;2025-08-08T08:12:31.783026266Z&quot; level=error msg=&quot;can&#x27;t initial GeoIP: can&#x27;t download MMDB: context deadline exceeded&quot;</span><br></pre></td></tr></table></figure></p>
<p>打开暴露的端口进入连接页面，后端地址位公网ip+9090端口，secret为设置的密钥<br />
<img
src="https://pub-3809a824eb8b4c2ebf27716c5f100aa2.r2.dev/Snipaste_2025-08-08_20-25-00.png"
alt="连接页面" /></p>
<p>登录成功<br />
<img
src="https://pub-3809a824eb8b4c2ebf27716c5f100aa2.r2.dev/Snipaste_2025-08-08_20-25-15.png"
alt="登录成功" /></p>
]]></content>
      <tags>
        <tag>云服务器配置</tag>
      </tags>
  </entry>
  <entry>
    <title>云服务器部署code-server+oauth2认证</title>
    <url>/2025/08/12/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2code-server+oauth2%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<p>平时都是使用vscode的ssh-remote访问云服务器,
但如果云服务器在境外这样会很卡,
可以直接在服务器上部署code-server开代理使用网页访问</p>
<h2 id="code-server">code-server</h2>
<p>下载安装脚本<br />
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br></pre></td></tr></table></figure><br />
修改 ~/.config/code-server/config.yaml中的配置,
如果不想麻烦可以直接设置一个密码访问即可,
为了防止密码爆破可以考虑使用oauth2-proxy+github账号的方式验证<br />
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bind-addr: 127.0.0.1:8080</span><br><span class="line">auth: password</span><br><span class="line">password: my-password</span><br><span class="line">cert: false</span><br><span class="line"></span><br><span class="line">bind-addr: 127.0.0.1:8080</span><br><span class="line">auth: none               </span><br><span class="line">cert: false              </span><br></pre></td></tr></table></figure></p>
<p>然后在aaPanel设置nginx域名和反代, 如果是使用密码现在就可以访问了,
如果使用oauth2-proxy还需要继续设置</p>
<h2 id="oauth2-proxy">oauth2-proxy</h2>
<p>在Github Settings -&gt; Developer settings -&gt; OAuth Apps -&gt; New
OAuth App. Homepage URL设置为域名, Authorization callback
URL可设置为域名/oauth2/callback<br />
下载<a
href="https://github.com/oauth2-proxy/oauth2-proxy/releases">oauth2-proxy</a><br />
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/oauth2-proxy/oauth2-proxy/releases/download/v7.6.0/oauth2-proxy-v7.6.0.linux-amd64.tar.gz</span><br><span class="line">tar -xvf oauth2-proxy-v7.6.0.linux-amd64.tar.gz</span><br><span class="line">sudo mv oauth2-proxy-v7.6.0.linux-amd64/oauth2-proxy /usr/local/bin/</span><br></pre></td></tr></table></figure></p>
<p>然后创建配置文件 oauth2-proxy.cfg<br />
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">provider = &quot;github&quot;</span><br><span class="line"></span><br><span class="line">client_id = &quot;client_id&quot;</span><br><span class="line">client_secret = &quot;client_secret&quot;</span><br><span class="line"></span><br><span class="line">cookie_secret = &quot;&#123;32位base64&#125;&quot;</span><br><span class="line">cookie_secure = true</span><br><span class="line">cookie_domains = [&quot;.domain&quot;] # 注意前面的点</span><br><span class="line"></span><br><span class="line">http_address = &quot;127.0.0.1:4180&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">必须与 GitHub 中设置的Authorization callback URL完全一致</span></span><br><span class="line">redirect_url = &quot;https://domain/oauth2/callback&quot;</span><br><span class="line"></span><br><span class="line">pass_authorization_header = true</span><br><span class="line">set_xauthrequest = true</span><br><span class="line"></span><br><span class="line">email_domains = [ &quot;*&quot; ] </span><br><span class="line"></span><br><span class="line">github_users = [&quot;github username&quot;]</span><br></pre></td></tr></table></figure></p>
<p>创建一个服务运行oauth2-proxy<br />
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=oauth2-proxy</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/oauth2-proxy --config=/oauth2-proxy.cfg</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=3</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>
<p>在nginx反代中配置<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location = /oauth2/auth &#123;</span><br><span class="line">    internal;</span><br><span class="line">    proxy_pass http://oauth2-proxy;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Scheme $scheme;</span><br><span class="line">    proxy_set_header X-Auth-Request-Redirect $request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /oauth2/ &#123;</span><br><span class="line">    proxy_pass http://oauth2-proxy;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Scheme $scheme;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    auth_request /oauth2/auth;</span><br><span class="line"></span><br><span class="line">    error_page 401 = /oauth2/start?rd=$request_uri;</span><br><span class="line"></span><br><span class="line">    auth_request_set $user $upstream_http_x_auth_request_user;</span><br><span class="line">    auth_request_set $email $upstream_http_x_auth_request_email;</span><br><span class="line">    proxy_set_header X-User $user;</span><br><span class="line">    proxy_set_header X-Email $email;</span><br><span class="line"></span><br><span class="line">    proxy_pass http://code-server;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">    proxy_set_header Accept-Encoding &quot;gzip&quot;;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="nginx-emerg-unknown-directive-auth_request-in">nginx: [emerg]
unknown directive “auth_request” in</h2>
<p>如果在aaPanel保存配置文件时出现nginx: [emerg] unknown directive
“auth_request” in….的错误, 说明安装的nginx不支持auth_request,
需要重新编译安装.<br />
首先卸载nginx P.S. <strong>如果之前配置过域名登录aaPanel,
一定要关掉这个然后试一下IP登录,
否则卸载nginx后就登不上了!!!</strong></p>
<hr />
<p>如果忘记关域名登录, 可以ssh到云服务器上, 执行bt , 选择Cancel domain
binding limit, 清除浏览器cookie后用IP登录</p>
<hr />
<p>然后编译安装, 模块名http_auth_request_module
模块参数–with-http_auth_request_module</p>
]]></content>
      <tags>
        <tag>云服务器配置</tag>
      </tags>
  </entry>
</search>
